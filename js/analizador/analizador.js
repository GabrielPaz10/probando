/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,13],$V2=[1,11],$V3=[1,27],$V4=[1,14],$V5=[1,43],$V6=[1,44],$V7=[1,45],$V8=[1,46],$V9=[1,47],$Va=[1,48],$Vb=[1,28],$Vc=[1,29],$Vd=[1,30],$Ve=[1,31],$Vf=[1,32],$Vg=[1,18],$Vh=[1,17],$Vi=[1,19],$Vj=[1,20],$Vk=[1,21],$Vl=[1,33],$Vm=[1,34],$Vn=[1,35],$Vo=[1,36],$Vp=[1,37],$Vq=[1,39],$Vr=[1,40],$Vs=[1,41],$Vt=[1,42],$Vu=[2,5,15,16,31,38,48,49,50,51,52,53,54,55,56,57,58,62,68,75,76,77,83,84,85,86,87,94,95,96,97],$Vv=[1,71],$Vw=[1,72],$Vx=[1,56],$Vy=[1,57],$Vz=[1,58],$VA=[1,59],$VB=[1,60],$VC=[1,61],$VD=[1,62],$VE=[1,63],$VF=[1,64],$VG=[1,65],$VH=[1,66],$VI=[1,67],$VJ=[1,68],$VK=[1,69],$VL=[1,70],$VM=[1,73],$VN=[1,74],$VO=[1,75],$VP=[1,76],$VQ=[1,77],$VR=[1,78],$VS=[2,64],$VT=[1,81],$VU=[1,87],$VV=[1,82],$VW=[1,83],$VX=[1,85],$VY=[1,86],$VZ=[1,90],$V_=[1,91],$V$=[1,96],$V01=[8,17,33,37,41,45,46,59,60,61,62,63,64,65,66,67,69,70,71,72,73,74,81,82,89,90,91,92,100],$V11=[16,36,93],$V21=[8,33],$V31=[8,30,41],$V41=[2,53],$V51=[8,17,33,37,41,66,67,81,82],$V61=[8,17,33,37,41,82],$V71=[8,17,33,37,41,61,62,66,67,69,70,71,72,73,74,81,82],$V81=[8,17,33,37,41,61,62,63,64,65,66,67,69,70,71,72,73,74,81,82],$V91=[8,17,33,37,41,66,67,69,70,71,72,73,74,81,82],$Va1=[1,166],$Vb1=[33,37,41],$Vc1=[2,98],$Vd1=[1,194],$Ve1=[1,226],$Vf1=[1,227],$Vg1=[1,228],$Vh1=[1,229],$Vi1=[1,230],$Vj1=[1,231],$Vk1=[1,232],$Vl1=[1,223],$Vm1=[1,224],$Vn1=[1,225],$Vo1=[14,33,41],$Vp1=[14,16,31,42,43,48,49,50,51,52,53,54,55,56,57,58,62,68,75,76,77,83,84,85,86,87,94,95,96,97,103,106,109,110,113,114,115,119,120,121],$Vq1=[1,312],$Vr1=[1,324],$Vs1=[1,335],$Vt1=[14,109,110];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"completo":4,"EOF":5,"global":6,"asignacion":7,"PTCOMA":8,"declaracion":9,"creacionstruct":10,"funcion":11,"vector":12,"expresion":13,"LLAVEDER":14,"STRUCT":15,"ID":16,"LLAVEIZQ":17,"parametros":18,"cuerpoLocal":19,"local":20,"condicionales":21,"ciclos":22,"control":23,"imprimir":24,"declaracionVector":25,"asignacionVector":26,"structs":27,"decStruct":28,"asigStruct":29,"IGUAL":30,"PARIZQ":31,"atributos":32,"PARDER":33,"PUNTO":34,"tipo":35,"CORIZQ":36,"CORDER":37,"VOID":38,"llamadaMetodo":39,"llamadaFuncion":40,"COMA":41,"PRINT":42,"PRINTLN":43,"listaId":44,"INC":45,"DEC":46,"tipoValor":47,"DECIMAL":48,"ENTERO":49,"CADENA":50,"CARACTER":51,"TRUE":52,"FALSE":53,"BOOLEAN":54,"CHAR":55,"DOUBLE":56,"INT":57,"STRING":58,"EXTE":59,"CONCATENACION":60,"MAS":61,"MENOS":62,"POR":63,"DIVIDIDO":64,"MODULO":65,"AND":66,"OR":67,"NOT":68,"IGUALDAD":69,"DIFERENTE":70,"MAYORIGUAL":71,"MENORIGUAL":72,"MAYOR":73,"MENOR":74,"BEGIN":75,"END":76,"NULL":77,"ternario":78,"nativas":79,"estructuras":80,"PREGUNTA":81,"DOSPTS":82,"POW":83,"SQRT":84,"SIN":85,"COS":86,"TAN":87,"cop":88,"SUBSTRING":89,"LENGTH":90,"UPPERCASE":91,"LOWERCASE":92,"PARSE":93,"TOINT":94,"TODOUBLE":95,"RSTRING":96,"TYPEOF":97,"PUSH":98,"POP":99,"COPOSITION":100,"ifcondicion":101,"switchcondicion":102,"IF":103,"elsecondicion":104,"ELSE":105,"SWITCH":106,"casecondicion":107,"defaultcondicion":108,"CASE":109,"DEFAULT":110,"ciclowhile":111,"ciclofor":112,"DO":113,"WHILE":114,"FOR":115,"asignacionfor":116,"declaracionfor":117,"IN":118,"RETURN":119,"CONTINUE":120,"BREAK":121,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PTCOMA",14:"LLAVEDER",15:"STRUCT",16:"ID",17:"LLAVEIZQ",30:"IGUAL",31:"PARIZQ",33:"PARDER",34:"PUNTO",36:"CORIZQ",37:"CORDER",38:"VOID",41:"COMA",42:"PRINT",43:"PRINTLN",45:"INC",46:"DEC",48:"DECIMAL",49:"ENTERO",50:"CADENA",51:"CARACTER",52:"TRUE",53:"FALSE",54:"BOOLEAN",55:"CHAR",56:"DOUBLE",57:"INT",58:"STRING",59:"EXTE",60:"CONCATENACION",61:"MAS",62:"MENOS",63:"POR",64:"DIVIDIDO",65:"MODULO",66:"AND",67:"OR",68:"NOT",69:"IGUALDAD",70:"DIFERENTE",71:"MAYORIGUAL",72:"MENORIGUAL",73:"MAYOR",74:"MENOR",75:"BEGIN",76:"END",77:"NULL",81:"PREGUNTA",82:"DOSPTS",83:"POW",84:"SQRT",85:"SIN",86:"COS",87:"TAN",89:"SUBSTRING",90:"LENGTH",91:"UPPERCASE",92:"LOWERCASE",93:"PARSE",94:"TOINT",95:"TODOUBLE",96:"RSTRING",97:"TYPEOF",98:"PUSH",99:"POP",100:"COPOSITION",103:"IF",105:"ELSE",106:"SWITCH",109:"CASE",110:"DEFAULT",113:"DO",114:"WHILE",115:"FOR",118:"IN",119:"RETURN",120:"CONTINUE",121:"BREAK"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[10,5],[19,2],[19,1],[20,1],[20,2],[20,1],[20,2],[20,2],[20,2],[20,2],[20,2],[12,1],[12,1],[27,1],[27,1],[28,7],[29,3],[25,8],[25,4],[26,6],[11,8],[11,8],[11,7],[11,7],[39,4],[39,3],[40,4],[40,3],[18,4],[18,6],[18,2],[18,4],[32,3],[32,1],[24,4],[24,3],[24,4],[24,3],[9,4],[9,2],[44,3],[44,1],[7,3],[7,2],[7,2],[7,4],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[35,1],[35,1],[35,1],[35,1],[35,1],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,2],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,2],[13,2],[13,2],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,3],[80,4],[78,5],[79,6],[79,4],[79,4],[79,4],[79,4],[79,1],[79,7],[79,4],[79,4],[79,4],[79,5],[79,4],[79,4],[79,4],[79,4],[79,5],[79,4],[88,5],[21,1],[21,1],[101,8],[101,7],[101,7],[101,6],[104,2],[104,4],[104,3],[102,8],[102,7],[102,7],[102,6],[107,5],[107,4],[107,4],[107,3],[108,3],[108,2],[22,1],[22,1],[111,9],[111,7],[111,8],[111,6],[112,11],[112,11],[112,9],[112,7],[116,3],[117,4],[23,2],[23,1],[23,1],[23,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 gramatical+= "init := completo EOF"; return $$[$0-1];  
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1]; gramatical+="completo := completo global"; 
break;
case 3:
 this.$ = [$$[$0]]; gramatical+= "completo := global";
break;
case 4:
 this.$=$$[$0-1];gramatical+= "global := asginacion ;"; 
break;
case 5:
 this.$=$$[$0-1];gramatical+= "global := declaracion ;"; 
break;
case 7:
 this.$=$$[$0];gramatical+= "global := funcion"; 
break;
case 8: case 16: case 18: case 19: case 20: case 21: case 22: case 125:
 this.$=$$[$0-1]; 
break;
case 9:
this.$=$$[$0-1];
break;
case 10: case 11:
 consola.actualizar(`Se esperaba ${yytext}, l: ${this._$.first_line}, c: ${this._$.first_column}\n`); 
                                errores.agregar(new Error('Sintactico',`Se esperaba ${yytext}`, this._$.first_line , this._$.first_column,'')); 
break;
case 13:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 14:
 this.$ =[$$[$0]]; 
break;
case 15: case 17: case 23: case 24: case 92: case 93: case 94: case 95: case 96: case 124: case 135:
 this.$=$$[$0]; 
break;
case 29:
 this.$= new Arreglo($$[$0-4],$$[$0-7],null,$$[$0-1],_$[$0-7].first_line, _$[$0-7].first_column) ; 
break;
case 30:
 this.$= new Arreglo($$[$0],$$[$0-3],null,null,_$[$0-3].first_line, _$[$0-3].first_column) ;
break;
case 31:
 this.$ = new AsignacionArreglo($$[$0-5],$$[$0-3],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 32:
 this.$ = new Funcion(Tipos.VOID, $$[$0-6],$$[$0-4],$$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 33:
 this.$ = new Funcion($$[$0-7], $$[$0-6],$$[$0-4],$$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 34:
 this.$ = new Funcion(Tipos.VOID, $$[$0-5],[],$$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 35:
 this.$ = new Funcion($$[$0-6], $$[$0-5],[],$$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 36:
 this.$ = new LlamadaMetodo($$[$0-3],$$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 37:
 this.$ = new LlamadaMetodo($$[$0-2],[], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 38:
 this.$ = new LlamarFuncion($$[$0-3],$$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 39:
 this.$ = new LlamarFuncion($$[$0-2],[], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 40:
 $$[$0-3].push( new Parametros($$[$0-1],null,$$[$0])); this.$=$$[$0-3]; 
break;
case 41:
 $$[$0-5].push( new Parametros(Tipos.ARRAY,$$[$0-3],$$[$0-2])); this.$=$$[$0-5]; 
break;
case 42:
 this.$ = [new Parametros($$[$0-1],null,$$[$0])]; 
break;
case 43:
 this.$ = [new Parametros(Tipos.ARRAY,$$[$0-3],$$[$0-2])]; 
break;
case 44:
 $$[$0-2].push($$[$0]); this.$= $$[$0-2]; 
break;
case 45: case 53:
 this.$ = [$$[$0]]; 
break;
case 46:
this.$ = new Print($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 47:
this.$ = new Print([],_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 48:
this.$ = new Print($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column,true); 
break;
case 49:
this.$ = new Print([],_$[$0-2].first_line, _$[$0-2].first_column,true); 
break;
case 50:
 this.$ = new Declaracion($$[$0-3], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column) ; 
break;
case 51:
 this.$ = new Declaracion($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column) ; 
break;
case 52:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 54:
 this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 55:
 this.$ = new AsignacionDecInc($$[$0-1], TipoAsignacion.INCREMENTO, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 56:
 this.$ = new AsignacionDecInc($$[$0-1], TipoAsignacion.DECREMENTO, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 57:
 this.$ = new Asignacion($$[$0-3], [], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 58:
 this.$ = (Number.isInteger(Number($$[$0])))?new SetearValor(Tipos.INT, Number($$[$0]), _$[$0].first_line, _$[$0].first_column):new SetearValor(Tipos.DOUBLE, Number($$[$0]), _$[$0].first_line, _$[$0].first_column); 
break;
case 59:
 this.$ = new SetearValor(Tipos.INT, Number($$[$0]), _$[$0].first_line, _$[$0].first_column); 
break;
case 60:
 this.$ = new SetearValor(Tipos.STRING, $$[$0] , _$[$0].first_line, _$[$0].first_column); 
break;
case 61:
 this.$ = new SetearValor(Tipos.CHAR, $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 62:
 this.$ = new SetearValor(Tipos.BOOLEAN, true, _$[$0].first_line, _$[$0].first_column); 
break;
case 63:
 this.$ = new SetearValor(Tipos.BOOLEAN, false, _$[$0].first_line, _$[$0].first_column); 
break;
case 64:
 this.$= new ObtenerValor($$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 65:
 this.$ = Tipos.BOOLEAN; 
break;
case 66:
 this.$ = Tipos.CHAR; 
break;
case 67:
 this.$ = Tipos.DOUBLE; 
break;
case 68:
 this.$ = Tipos.INT; 
break;
case 69:
 this.$ = Tipos.STRING; 
break;
case 70:
 this.$ = new Aritmetica(TipoOperacion.EXTE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 71:
 this.$ = new Aritmetica(TipoOperacion.CONCATENACION, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 72:
 this.$ = new Aritmetica(TipoOperacion.SUMA, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 73:
 this.$ = new Aritmetica(TipoOperacion.RESTA, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 74:
 this.$ = new Aritmetica(TipoOperacion.MULTIPLICACION, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 75:
 this.$ = new Aritmetica(TipoOperacion.DIVISION, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 76:
 this.$ = new Aritmetica(TipoOperacion.MODULO, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 77:
 this.$ = new Logico(TipoLogico.AND, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 78:
 this.$ = new Logico(TipoLogico.OR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 79:
 this.$ = new Logico(TipoLogico.NOT, $$[$0], null,_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 80:
 this.$ = new Relacional(TiposRelacional.IGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 81:
 this.$ = new Relacional(TiposRelacional.DIFERENTE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 82:
 this.$ = new Relacional(TiposRelacional.MAYORI, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 83:
 this.$ = new Relacional(TiposRelacional.MENORI, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 84:
 this.$ = new Relacional(TiposRelacional.MAYOR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 85:
 this.$ = new Relacional(TiposRelacional.MENOR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 86:
 this.$ = new Unario(TUnario.NEGATIVO, $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 87:
 this.$ = new Unario(TUnario.INCREMENTO, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 88:
 this.$ = new Unario(TUnario.DECREMENTO, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 89:
 this.$ = new Begin(_$[$0].first_line, _$[$0].first_column); 
break;
case 90:
 this.$ = new End(_$[$0].first_line, _$[$0].first_column); 
break;
case 91:
 this.$ = Tipos.NULL; 
break;
case 97:
 this.$ = $$[$0-1]; 
break;
case 98:
 this.$ = new ObtenerVector($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 99:
 this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 100:
 this.$= new Pow($$[$0-3],$$[$0-1],_$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 101:
 this.$ = new Sqrt($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 102:
 this.$ = new Sin($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 103:
 this.$ = new Cos($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 104:
 this.$ = new Tan($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 105:
 this.$=$$[$0];
break;
case 106:
 this.$ = new Substring($$[$0-6],$$[$0-3],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 107:
 this.$ = new Length($$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 108:
 this.$ = new ToUpperCase($$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 109:
 this.$ = new ToLowerCase($$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 110:
 this.$ = new Parse($$[$0-4],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 111:
 this.$ = new ToInt($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 112:
 this.$ = new ToDouble($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 113:
 this.$ = new StringM($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 114:
 this.$ = new Typeof($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 115:
 this.$= new Push($$[$0-4],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 116:
 this.$= new Pop($$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 117:
 this.$ = new CaracterOfPosition($$[$0-4],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 118: case 119:
 this.$ = $$[$0]; 
break;
case 120:
 this.$= new If($$[$0-5],$$[$0-2],$$[$0],_$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 121:
 this.$= new If($$[$0-4],$$[$0-1],null,_$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 122:
 this.$= new If($$[$0-4],[],$$[$0],_$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 123:
 this.$= new If($$[$0-3],[],null,_$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 126: case 136:
 this.$=[]; 
break;
case 127:
 this.$=new Switch($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line, _$[$0-7].first_column);
break;
case 128:
 this.$=new Switch($$[$0-4],$$[$0-1],[],_$[$0-6].first_line, _$[$0-6].first_column);
break;
case 129:
 this.$=new Switch($$[$0-4],[],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column);
break;
case 130:
 this.$=new Switch($$[$0-3],[],[],_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 131:
 $$[$0-4].push(new Case($$[$0-2],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column)); this.$=$$[$0-4]; 
break;
case 132:
 $$[$0-3].push(new Case($$[$0-1],[],_$[$0-3].first_line, _$[$0-3].first_column)); this.$=$$[$0-3]; 
break;
case 133:
 this.$=[new Case($$[$0-2],$$[$0],_$[$0-3].first_line, _$[$0-3].first_column)]; 
break;
case 134:
 this.$=[new Case($$[$0-1],[],_$[$0-2].first_line, _$[$0-2].first_column)]; 
break;
case 137: case 138:
this.$=$$[$0];
break;
case 139:
 this.$= new Dowhile($$[$0-2],$$[$0-6],_$[$0-8].first_line, _$[$0-8].first_column);
break;
case 140:
 this.$= new While($$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column);
break;
case 141:
 this.$= new Dowhile($$[$0-2],[],_$[$0-7].first_line, _$[$0-7].first_column);
break;
case 142:
 this.$= new While($$[$0-3],[],_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 143: case 144:
 this.$= new For($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 145:
 this.$= new ForIn($$[$0-7],$$[$0-4],new Arreglo('iterador',Tipos.ARRAY,null,$$[$0-1],_$[$0-8].first_line, _$[$0-8].first_column),_$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 146:
 this.$= new ForIn($$[$0-5],$$[$0-3],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 147:
this.$ = new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 148:
this.$ = new Declaracion($$[$0-3],$$[$0-2],$$[$0],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 149:
this.$= new Return($$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 150:
this.$= new Return(null,_$[$0].first_line, _$[$0].first_column);
break;
case 151:
this.$= new Continue(_$[$0].first_line, _$[$0].first_column);
break;
case 152:
this.$= new Break(_$[$0].first_line, _$[$0].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,15:$V1,16:$V2,25:15,26:16,31:$V3,35:12,38:$V4,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{1:[3]},{2:$V0,5:[1,49],6:50,7:4,9:5,10:6,11:7,12:8,13:9,15:$V1,16:$V2,25:15,26:16,31:$V3,35:12,38:$V4,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},o($Vu,[2,3]),{8:[1,51]},{8:[1,52]},{8:[1,53]},o($Vu,[2,7]),{8:[1,54]},{8:[1,55],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{8:[1,79],14:[1,80]},o([8,59,60,61,62,63,64,65,66,67,69,70,71,72,73,74,81,89,90,91,92,100],$VS,{30:$VT,31:$VU,36:[1,84],45:$VV,46:$VW,98:$VX,99:$VY}),{16:[1,89],36:$VZ,44:88,93:$V_},{16:[1,92]},{16:[1,93]},{8:[2,23]},{8:[2,24]},{13:94,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:97,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},o($V01,[2,89]),o($V01,[2,90]),o($V01,[2,91]),o($V01,[2,92]),o($V01,[2,93]),o($V01,[2,94]),o($V01,[2,95]),o($V01,[2,96]),{13:98,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},o($V11,[2,65]),o($V11,[2,66]),o($V11,[2,67]),o($V11,[2,68]),o($V11,[2,69]),{31:[1,99]},{31:[1,100]},{31:[1,101]},{31:[1,102]},{31:[1,103]},o($V01,[2,105]),{31:[1,104]},{31:[1,105]},{31:[1,106]},{31:[1,107]},o($V01,[2,58]),o($V01,[2,59]),o($V01,[2,60]),o($V01,[2,61]),o($V01,[2,62]),o($V01,[2,63]),{1:[2,1]},o($Vu,[2,2]),o($Vu,[2,4]),o($Vu,[2,5]),o($Vu,[2,6]),o($Vu,[2,8]),o($Vu,[2,9]),{13:108,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:109,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:110,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:111,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:112,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:113,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:114,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:115,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:116,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:117,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:118,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:119,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:120,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:121,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:122,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},o($V01,[2,87]),o($V01,[2,88]),{13:123,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{31:[1,124]},{31:[1,125]},{31:[1,126]},{31:[1,127]},{31:[1,128]},o($Vu,[2,10]),o($Vu,[2,11]),{13:129,16:$V$,31:$V3,35:95,36:[1,130],40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},o($V21,[2,55]),o($V21,[2,56]),{13:131,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{31:[1,132]},{31:[1,133]},{13:136,16:$V$,31:$V3,32:134,33:[1,135],35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{8:[2,51],30:[1,137],41:[1,138]},o($V31,$V41,{31:[1,139]}),{37:[1,140]},{31:[1,141]},{17:[1,142]},{31:[1,143]},o($V51,[2,79],{45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR}),{93:$V_},o($V01,$VS,{31:$VU,36:[1,144],98:$VX,99:$VY}),o([8,17,33,37,41,45,46,61,62,63,64,65,66,67,69,70,71,72,73,74,81,82],[2,86],{59:$Vx,60:$Vy,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR}),{33:[1,145],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{13:146,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:147,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:148,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:149,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:150,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:151,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:152,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:153,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:154,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},o($V61,[2,70],{45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR}),o($V61,[2,71],{45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR}),o($V71,[2,72],{45:$Vv,46:$Vw,59:$Vx,60:$Vy,63:$VB,64:$VC,65:$VD,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR}),o($V71,[2,73],{45:$Vv,46:$Vw,59:$Vx,60:$Vy,63:$VB,64:$VC,65:$VD,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR}),o($V81,[2,74],{45:$Vv,46:$Vw,59:$Vx,60:$Vy,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR}),o($V81,[2,75],{45:$Vv,46:$Vw,59:$Vx,60:$Vy,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR}),o($V81,[2,76],{45:$Vv,46:$Vw,59:$Vx,60:$Vy,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR}),o($V51,[2,77],{45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR}),o([8,17,33,37,41,67,81,82],[2,78],{45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR}),o($V91,[2,80],{45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR}),o($V91,[2,81],{45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR}),o($V91,[2,82],{45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR}),o($V91,[2,83],{45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR}),o($V91,[2,84],{45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR}),o($V91,[2,85],{45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR}),{45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,82:[1,155],89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{13:156,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{33:[1,157]},{33:[1,158]},{33:[1,159]},{13:160,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},o($V21,[2,54],{45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR}),{37:[1,161]},{37:[1,162],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{13:163,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{33:[1,164]},{33:[1,165],41:$Va1},o($V01,[2,39]),o($Vb1,[2,45],{45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR}),{13:167,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{16:[1,168]},{18:169,33:[1,170],35:171,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{16:[1,172]},{13:173,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{18:174,35:171,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{18:175,33:[1,176],35:171,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{13:177,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},o($V01,[2,97]),{41:[1,178],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{33:[1,179],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{33:[1,180],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{33:[1,181],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{33:[1,182],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{33:[1,183],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{33:[1,184],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{33:[1,185],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{33:[1,186],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{13:187,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{41:[1,188],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},o($V01,[2,107]),o($V01,[2,108]),o($V01,[2,109]),{33:[1,189],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},o($V21,[2,57]),o([8,45,46,59,60,61,62,63,64,65,66,67,69,70,71,72,73,74,81,89,90,91,92,100],$Vc1,{30:[1,190]}),{33:[1,191],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},o($V01,[2,116]),o($V01,[2,38]),{13:192,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{8:[2,50],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},o($V31,[2,52]),{33:[1,193],41:$Vd1},{17:[1,195]},{16:[1,196]},{8:[2,30],30:[1,197]},{33:[1,198],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{14:[1,199],41:$Vd1},{33:[1,200],41:$Vd1},{17:[1,201]},{37:[1,202],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{13:203,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},o($V01,[2,101]),o($V01,[2,102]),o($V01,[2,103]),o($V01,[2,104]),o($V01,[2,111]),o($V01,[2,112]),o($V01,[2,113]),o($V01,[2,114]),o([8,17,33,37,41,81,82],[2,99],{45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR}),{13:204,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},o($V01,[2,117]),{13:205,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},o($V01,[2,115]),o($Vb1,[2,44],{45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR}),{17:[1,206]},{35:207,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf},{7:213,9:214,12:211,13:217,16:$V2,19:208,20:209,21:210,22:212,23:215,24:216,25:15,26:16,31:$V3,35:222,40:25,42:$Ve1,43:$Vf1,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt,101:218,102:219,103:$Vg1,106:$Vh1,111:220,112:221,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1},o($Vo1,[2,42],{36:[1,233]}),{36:[1,234]},o($V01,[2,110]),{8:[2,12]},{17:[1,235]},{7:213,9:214,12:211,13:217,16:$V2,19:236,20:209,21:210,22:212,23:215,24:216,25:15,26:16,31:$V3,35:222,40:25,42:$Ve1,43:$Vf1,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt,101:218,102:219,103:$Vg1,106:$Vh1,111:220,112:221,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1},o($V01,$Vc1),{33:[1,237],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{33:[1,238],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{8:[2,31],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{7:213,9:214,12:211,13:217,16:$V2,19:239,20:209,21:210,22:212,23:215,24:216,25:15,26:16,31:$V3,35:222,40:25,42:$Ve1,43:$Vf1,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt,101:218,102:219,103:$Vg1,106:$Vh1,111:220,112:221,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1},{16:[1,240]},{7:213,9:214,12:211,13:217,14:[1,241],16:$V2,20:242,21:210,22:212,23:215,24:216,25:15,26:16,31:$V3,35:222,40:25,42:$Ve1,43:$Vf1,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt,101:218,102:219,103:$Vg1,106:$Vh1,111:220,112:221,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1},o($Vp1,[2,14]),o($Vp1,[2,15]),{8:[1,243]},o($Vp1,[2,17]),{8:[1,244]},{8:[1,245]},{8:[1,246]},{8:[1,247]},{8:[1,248],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},o($Vp1,[2,118]),o($Vp1,[2,119]),o($Vp1,[2,137]),o($Vp1,[2,138]),{16:[1,249],36:$VZ,44:88,93:$V_},{8:[2,150],13:250,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{8:[2,151]},{8:[2,152]},{31:[1,251]},{31:[1,252]},{31:[1,253]},{31:[1,254]},{17:[1,255]},{31:[1,256]},{16:[1,258],31:[1,257]},{37:[1,259]},{13:136,16:$V$,31:$V3,32:260,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{7:213,9:214,12:211,13:217,16:$V2,19:261,20:209,21:210,22:212,23:215,24:216,25:15,26:16,31:$V3,35:222,40:25,42:$Ve1,43:$Vf1,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt,101:218,102:219,103:$Vg1,106:$Vh1,111:220,112:221,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1},{7:213,9:214,12:211,13:217,14:[1,262],16:$V2,20:242,21:210,22:212,23:215,24:216,25:15,26:16,31:$V3,35:222,40:25,42:$Ve1,43:$Vf1,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt,101:218,102:219,103:$Vg1,106:$Vh1,111:220,112:221,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1},o($V01,[2,100]),o($V01,[2,106]),{7:213,9:214,12:211,13:217,14:[1,263],16:$V2,20:242,21:210,22:212,23:215,24:216,25:15,26:16,31:$V3,35:222,40:25,42:$Ve1,43:$Vf1,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt,101:218,102:219,103:$Vg1,106:$Vh1,111:220,112:221,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1},o($Vo1,[2,40],{36:[1,264]}),o($Vu,[2,35]),o($Vp1,[2,13]),o($Vp1,[2,16]),o($Vp1,[2,18]),o($Vp1,[2,19]),o($Vp1,[2,20]),o($Vp1,[2,21]),o($Vp1,[2,22]),o($V31,$V41),{8:[2,149],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{13:136,16:$V$,31:$V3,32:265,33:[1,266],35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:136,16:$V$,31:$V3,32:267,33:[1,268],35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:269,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:270,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{7:213,9:214,12:211,13:217,14:[1,272],16:$V2,19:271,20:209,21:210,22:212,23:215,24:216,25:15,26:16,31:$V3,35:222,40:25,42:$Ve1,43:$Vf1,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt,101:218,102:219,103:$Vg1,106:$Vh1,111:220,112:221,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1},{13:273,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{16:[1,276],35:277,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,116:274,117:275},{118:[1,278]},o($Vo1,[2,43]),{37:[1,279],41:$Va1},{7:213,9:214,12:211,13:217,14:[1,280],16:$V2,20:242,21:210,22:212,23:215,24:216,25:15,26:16,31:$V3,35:222,40:25,42:$Ve1,43:$Vf1,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt,101:218,102:219,103:$Vg1,106:$Vh1,111:220,112:221,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1},o($Vu,[2,34]),o($Vu,[2,33]),{37:[1,281]},{33:[1,282],41:$Va1},{8:[2,47]},{33:[1,283],41:$Va1},{8:[2,49]},{33:[1,284],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{33:[1,285],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{7:213,9:214,12:211,13:217,14:[1,286],16:$V2,20:242,21:210,22:212,23:215,24:216,25:15,26:16,31:$V3,35:222,40:25,42:$Ve1,43:$Vf1,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt,101:218,102:219,103:$Vg1,106:$Vh1,111:220,112:221,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1},{114:[1,287]},{33:[1,288],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{8:[1,289]},{8:[1,290]},{30:[1,291]},{16:[1,292]},{13:294,16:$V$,31:$V3,35:95,36:[1,293],40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{8:[2,29]},o($Vu,[2,32]),o($Vo1,[2,41]),{8:[2,46]},{8:[2,48]},{17:[1,295]},{17:[1,296]},{114:[1,297]},{31:[1,298]},{17:[1,299]},{13:300,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:301,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{13:302,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{30:[1,303]},{13:136,16:$V$,31:$V3,32:304,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{17:[1,305],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{7:213,9:214,12:211,13:217,14:[1,307],16:$V2,19:306,20:209,21:210,22:212,23:215,24:216,25:15,26:16,31:$V3,35:222,40:25,42:$Ve1,43:$Vf1,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt,101:218,102:219,103:$Vg1,106:$Vh1,111:220,112:221,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1},{14:[1,310],107:308,108:309,109:[1,311],110:$Vq1},{31:[1,313]},{13:314,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{7:213,9:214,12:211,13:217,14:[1,316],16:$V2,19:315,20:209,21:210,22:212,23:215,24:216,25:15,26:16,31:$V3,35:222,40:25,42:$Ve1,43:$Vf1,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt,101:218,102:219,103:$Vg1,106:$Vh1,111:220,112:221,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1},{8:[1,317],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{8:[1,318],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{8:[2,147],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{13:319,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{37:[1,320],41:$Va1},{7:213,9:214,12:211,13:217,16:$V2,19:321,20:209,21:210,22:212,23:215,24:216,25:15,26:16,31:$V3,35:222,40:25,42:$Ve1,43:$Vf1,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt,101:218,102:219,103:$Vg1,106:$Vh1,111:220,112:221,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1},{7:213,9:214,12:211,13:217,14:[1,322],16:$V2,20:242,21:210,22:212,23:215,24:216,25:15,26:16,31:$V3,35:222,40:25,42:$Ve1,43:$Vf1,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt,101:218,102:219,103:$Vg1,106:$Vh1,111:220,112:221,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1},o($Vp1,[2,123],{104:323,105:$Vr1}),{14:[1,326],108:325,109:[1,327],110:$Vq1},{14:[1,328]},o($Vp1,[2,130]),{13:329,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{82:[1,330]},{13:331,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},{33:[1,332],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{7:213,9:214,12:211,13:217,14:[1,333],16:$V2,20:242,21:210,22:212,23:215,24:216,25:15,26:16,31:$V3,35:222,40:25,42:$Ve1,43:$Vf1,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt,101:218,102:219,103:$Vg1,106:$Vh1,111:220,112:221,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1},o($Vp1,[2,142]),{7:334,16:$Vs1},{7:336,16:$Vs1},{8:[2,148],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{17:[1,337]},{7:213,9:214,12:211,13:217,14:[1,338],16:$V2,20:242,21:210,22:212,23:215,24:216,25:15,26:16,31:$V3,35:222,40:25,42:$Ve1,43:$Vf1,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt,101:218,102:219,103:$Vg1,106:$Vh1,111:220,112:221,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1},o($Vp1,[2,121],{104:339,105:$Vr1}),o($Vp1,[2,122]),{17:[1,341],101:340,103:$Vg1},{14:[1,342]},o($Vp1,[2,128]),{13:343,16:$V$,31:$V3,35:95,40:25,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt},o($Vp1,[2,129]),{45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,82:[1,344],89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{7:213,9:214,12:211,13:217,14:[2,136],16:$V2,19:345,20:209,21:210,22:212,23:215,24:216,25:15,26:16,31:$V3,35:222,40:25,42:$Ve1,43:$Vf1,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt,101:218,102:219,103:$Vg1,106:$Vh1,111:220,112:221,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1},{33:[1,346],45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},{8:[1,347]},o($Vp1,[2,140]),{33:[1,348]},{30:$VT,45:$VV,46:$VW},{33:[1,349]},{7:213,9:214,12:211,13:217,16:$V2,19:350,20:209,21:210,22:212,23:215,24:216,25:15,26:16,31:$V3,35:222,40:25,42:$Ve1,43:$Vf1,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt,101:218,102:219,103:$Vg1,106:$Vh1,111:220,112:221,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1},o($Vp1,[2,146]),o($Vp1,[2,120]),o($Vp1,[2,124]),{7:213,9:214,12:211,13:217,14:[1,352],16:$V2,19:351,20:209,21:210,22:212,23:215,24:216,25:15,26:16,31:$V3,35:222,40:25,42:$Ve1,43:$Vf1,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt,101:218,102:219,103:$Vg1,106:$Vh1,111:220,112:221,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1},o($Vp1,[2,127]),{45:$Vv,46:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,81:$VM,82:[1,353],89:$VN,90:$VO,91:$VP,92:$VQ,100:$VR},o($Vt1,[2,134],{25:15,26:16,78:22,79:23,47:24,40:25,80:26,88:38,20:209,21:210,12:211,22:212,7:213,9:214,23:215,24:216,13:217,101:218,102:219,111:220,112:221,35:222,19:354,16:$V2,31:$V3,42:$Ve1,43:$Vf1,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,103:$Vg1,106:$Vh1,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1}),{7:213,9:214,12:211,13:217,14:[2,135],16:$V2,20:242,21:210,22:212,23:215,24:216,25:15,26:16,31:$V3,35:222,40:25,42:$Ve1,43:$Vf1,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt,101:218,102:219,103:$Vg1,106:$Vh1,111:220,112:221,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1},{8:[1,355]},o($Vp1,[2,141]),{17:[1,356]},{17:[1,357]},{7:213,9:214,12:211,13:217,14:[1,358],16:$V2,20:242,21:210,22:212,23:215,24:216,25:15,26:16,31:$V3,35:222,40:25,42:$Ve1,43:$Vf1,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt,101:218,102:219,103:$Vg1,106:$Vh1,111:220,112:221,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1},{7:213,9:214,12:211,13:217,14:[1,359],16:$V2,20:242,21:210,22:212,23:215,24:216,25:15,26:16,31:$V3,35:222,40:25,42:$Ve1,43:$Vf1,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt,101:218,102:219,103:$Vg1,106:$Vh1,111:220,112:221,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1},o($Vp1,[2,126]),o($Vt1,[2,132],{25:15,26:16,78:22,79:23,47:24,40:25,80:26,88:38,20:209,21:210,12:211,22:212,7:213,9:214,23:215,24:216,13:217,101:218,102:219,111:220,112:221,35:222,19:360,16:$V2,31:$V3,42:$Ve1,43:$Vf1,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,103:$Vg1,106:$Vh1,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1}),o($Vt1,[2,133],{25:15,26:16,78:22,79:23,47:24,40:25,80:26,88:38,21:210,12:211,22:212,7:213,9:214,23:215,24:216,13:217,101:218,102:219,111:220,112:221,35:222,20:242,16:$V2,31:$V3,42:$Ve1,43:$Vf1,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,103:$Vg1,106:$Vh1,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1}),o($Vp1,[2,139]),{7:213,9:214,12:211,13:217,16:$V2,19:361,20:209,21:210,22:212,23:215,24:216,25:15,26:16,31:$V3,35:222,40:25,42:$Ve1,43:$Vf1,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt,101:218,102:219,103:$Vg1,106:$Vh1,111:220,112:221,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1},{7:213,9:214,12:211,13:217,16:$V2,19:362,20:209,21:210,22:212,23:215,24:216,25:15,26:16,31:$V3,35:222,40:25,42:$Ve1,43:$Vf1,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt,101:218,102:219,103:$Vg1,106:$Vh1,111:220,112:221,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1},o($Vp1,[2,145]),o($Vp1,[2,125]),o($Vt1,[2,131],{25:15,26:16,78:22,79:23,47:24,40:25,80:26,88:38,21:210,12:211,22:212,7:213,9:214,23:215,24:216,13:217,101:218,102:219,111:220,112:221,35:222,20:242,16:$V2,31:$V3,42:$Ve1,43:$Vf1,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,103:$Vg1,106:$Vh1,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1}),{7:213,9:214,12:211,13:217,14:[1,363],16:$V2,20:242,21:210,22:212,23:215,24:216,25:15,26:16,31:$V3,35:222,40:25,42:$Ve1,43:$Vf1,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt,101:218,102:219,103:$Vg1,106:$Vh1,111:220,112:221,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1},{7:213,9:214,12:211,13:217,14:[1,364],16:$V2,20:242,21:210,22:212,23:215,24:216,25:15,26:16,31:$V3,35:222,40:25,42:$Ve1,43:$Vf1,47:24,48:$V5,49:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,68:$Vh,75:$Vi,76:$Vj,77:$Vk,78:22,79:23,80:26,83:$Vl,84:$Vm,85:$Vn,86:$Vo,87:$Vp,88:38,94:$Vq,95:$Vr,96:$Vs,97:$Vt,101:218,102:219,103:$Vg1,106:$Vh1,111:220,112:221,113:$Vi1,114:$Vj1,115:$Vk1,119:$Vl1,120:$Vm1,121:$Vn1},o($Vp1,[2,143]),o($Vp1,[2,144])],
defaultActions: {15:[2,23],16:[2,24],49:[2,1],199:[2,12],224:[2,151],225:[2,152],266:[2,47],268:[2,49],279:[2,29],282:[2,46],283:[2,48]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //salida y errores
    const {errores,consola} =require('../ts/index.js')
    var {gramatical}=require('../ts/index.js')
    const {Error} = require('../ts/Reportes/Error.js')
    //tipos de datos
    const {Tipos}= require('../ts/tiposD/Tipos.js')
    //declaracion
    const {Declaracion}= require('../ts/instrucciones/declaracion/declaracion.js')
    const {Arreglo} = require('../ts/instrucciones/declaracion/Arreglo.js')
    //asignacion 
    const {AsignacionDecInc,TipoAsignacion} = require('../ts/instrucciones/asignacion/asignacionDecInc.js')
    const {Asignacion} = require('../ts/instrucciones/asignacion/asignacion.js')
    const {AsignacionArreglo} = require('../ts/instrucciones/asignacion/AsignacionArreglo.js')
    //funciones
    const { LlamadaMetodo } = require('../ts/instrucciones/funciones/llamadaMetodo.js')
    const { Parametros } = require('../ts/instrucciones/funciones/parametros.js')
    const { Funcion } = require('../ts/instrucciones/funciones/funcion.js')
    const { LlamarFuncion } = require('../ts/expresiones/llamarFunciones.js')
    const { Main } = require('../ts/instrucciones/funciones/main.js')
    //control
    const { Break } = require('../ts/instrucciones/control/break.js')
    const { Continue } = require('../ts/instrucciones/control/continue.js')
    const { Return } = require('../ts/instrucciones/control/return.js')
    //condicionales 
    const { Case } = require('../ts/instrucciones/condicionales/Case.js')
    const { If } = require('../ts/instrucciones/condicionales/If.js')
    const { Switch } = require('../ts/instrucciones/condicionales/Switch.js')
    //ciclos
    const { Dowhile } = require('../ts/instrucciones/ciclos/dowhile.js')
    const { For } = require('../ts/instrucciones/ciclos/for.js')
    const { ForIn } = require('../ts/instrucciones/ciclos/forin.js')
    const { While } = require('../ts/instrucciones/ciclos/while.js')
    //valores 
    const { ObtenerValor } = require('../ts/expresiones/valores/obtenerValor.js')
    const { SetearValor } = require('../ts/expresiones/valores/setearValor.js')
    const {ObtenerVector} = require('../ts/expresiones/valores/obtenerVector.js')
    //operadores 
    const { TipoOperacion, Aritmetica } = require('../ts/expresiones/operadores/Aritmetica.js')
    const { TipoLogico, Logico } = require('../ts/expresiones/operadores/Logico.js')
    const { TiposRelacional, Relacional } = require('../ts/expresiones/operadores/Relacionales.js')
    const { Ternario } = require('../ts/expresiones/operadores/Ternario.js')
    const { TUnario, Unario } = require('../ts/expresiones/operadores/Unario.js')
    const { Begin } = require('../ts/expresiones/begin.js')
    const { End } = require('../ts/expresiones/end.js')
    //funciones nativas faltan push y pop
    const { Print } = require('../ts/instrucciones/Print.js')
    const { CaracterOfPosition } = require('../ts/expresiones/funcionesNativas/caracterOfPosition.js')
    const { Cos } = require('../ts/expresiones/funcionesNativas/coseno.js')
    const { Length } = require('../ts/expresiones/funcionesNativas/length.js')
    const { Parse } = require('../ts/expresiones/funcionesNativas/parse.js')
    const { Pow } = require('../ts/expresiones/funcionesNativas/pow.js')
    const { Sin } = require('../ts/expresiones/funcionesNativas/seno.js')
    const { Sqrt } = require('../ts/expresiones/funcionesNativas/sqrt.js')
    const { StringM } = require('../ts/expresiones/funcionesNativas/String.js')
    const { Substring } = require('../ts/expresiones/funcionesNativas/substring.js')
    const { Tan } = require('../ts/expresiones/funcionesNativas/tangente.js')
    const { ToDouble } = require('../ts/expresiones/funcionesNativas/toDouble.js')
    const { ToInt } = require('../ts/expresiones/funcionesNativas/toint.js')
    const { ToLowerCase } = require('../ts/expresiones/funcionesNativas/toLower.js')
    const { ToUpperCase } = require('../ts/expresiones/funcionesNativas/toUpper.js')
    const { Typeof } = require('../ts/expresiones/funcionesNativas/typeof.js')
    const { Pop } = require('../ts/expresiones/funcionesNativas/Pop.js')
    const { Push } = require('../ts/expresiones/funcionesNativas/Push.js')
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:
break;
case 5:return 69; //igualdad
break;
case 6:return 70; //diferente
break;
case 7:return 71; //mayor igual
break;
case 8:return 72; //menor igual
break;
case 9:return 73; //mayor
break;
case 10:return 74; //menor
break;
case 11:return 8;
break;
case 12:return 31;
break;
case 13:return 33;
break;
case 14:return 36;
break;
case 15:return 37;
break;
case 16:return 17;
break;
case 17:return 14;
break;
case 18:return 41;
break;
case 19:return 30;
break;
case 20:return 81;
break;
case 21:return 82;
break;
case 22:return 66;
break;
case 23:return 67;
break;
case 24:return 68;
break;
case 25:return 59
break;
case 26:return 60
break;
case 27:return 45;        //Incremento
break;
case 28:return 46;        //Decremento
break;
case 29:return 61;         //Suma
break;
case 30:return 62;         //Resta
break;
case 31:return 63;         //Multipliación
break;
case 32:return 64;         //División
break;
case 33:return 65;         //Módulo
break;
case 34:return 83;
break;
case 35:return 84;
break;
case 36:return 85;
break;
case 37:return 86;
break;
case 38:return 87;
break;
case 39:return 100;
break;
case 40:return 89;
break;
case 41:return 75;
break;
case 42:return 76;
break;
case 43:return 90;
break;
case 44:return 92;
break;
case 45:return 91;
break;
case 46:return 93;
break;
case 47:return 94;
break;
case 48:return 95;
break;
case 49:return 96;
break;
case 50:return 97;
break;
case 51:return 99;
break;
case 52:return 98;
break;
case 53:return 42;
break;
case 54:return 43;
break;
case 55:return 77;
break;
case 56:return 57;
break;
case 57:return 56;
break;
case 58:return 54;
break;
case 59:return 55;
break;
case 60:return 58;
break;
case 61:return 15;
break;
case 62:return 38;
break;
case 63:return 103;
break;
case 64:return 105;
break;
case 65:return 106;
break;
case 66:return 109;
break;
case 67:return 110;
break;
case 68:return 114;
break;
case 69:return 113;
break;
case 70:return 115;
break;
case 71:return 118;
break;
case 72:return 121;
break;
case 73:return 120;
break;
case 74:return 119;
break;
case 75: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 50; 
break;
case 76: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 51; 
break;
case 77:return 48;  //Decimal
break;
case 78:return 49;   //Entero
break;
case 79:return 52;     //Verdadero
break;
case 80:return 53;    //Falso
break;
case 81:return 16;       //Identificadores
break;
case 82:return 34;
break;
case 83:return 5;
break;
case 84: consola.actualizar(`${yy_.yytext} caracter no conocido, l: ${yy_.yylloc.first_line}, c: ${yy_.yylloc.first_column}\n`); 
    errores.agregar(new Error('Lexico',`Error lexico, ${yy_.yytext} caracter no conocido`, yy_.yylloc.first_line , yy_.yylloc.first_column,'')); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:;)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:=)/,/^(?:\?)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\^)/,/^(?:&)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:\.caracterOfPosition\b)/,/^(?:\.subString\b)/,/^(?:begin\b)/,/^(?:end\b)/,/^(?:\.length\b)/,/^(?:\.toLowercase\b)/,/^(?:\.toUppercase\b)/,/^(?:\.parse\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:string\b)/,/^(?:typeof\b)/,/^(?:\.pop\b)/,/^(?:\.push\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:null\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:struct\b)/,/^(?:void\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:"((\\")|[^\"\n])*")/,/^(?:'((\\\\)|(\\n)|(\\t)|(\\")|(\\')|[^\'\n])')/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:\.)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}